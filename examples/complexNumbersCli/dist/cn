#!/usr/bin/env node
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var ComplexNumber = require('./complexNumber.js');
var util = require('./util.js');

if (process.argv.length === 4) {
  var command = process.argv[2];
  var number = process.argv[3];

  var _util$validateComplex = util.validateComplexNumber(number),
      _util$validateComplex2 = _slicedToArray(_util$validateComplex, 2),
      real = _util$validateComplex2[0],
      imag = _util$validateComplex2[1];

  if (command === 'mod') {
    console.log(ComplexNumber.moduo(new ComplexNumber(real, imag)));
  } else if (command === 'conj') {
    var z = ComplexNumber.conjugate(new ComplexNumber(real, imag));

    console.log(z.toString());
  }
} else if (process.argv.length === 5) {
  var _command = process.argv[2];
  var number1 = process.argv[3];
  var number2 = process.argv[4];

  var _util$validateComplex3 = util.validateComplexNumber(number1),
      _util$validateComplex4 = _slicedToArray(_util$validateComplex3, 2),
      real1 = _util$validateComplex4[0],
      imag1 = _util$validateComplex4[1];

  var _util$validateComplex5 = util.validateComplexNumber(number2),
      _util$validateComplex6 = _slicedToArray(_util$validateComplex5, 2),
      real2 = _util$validateComplex6[0],
      imag2 = _util$validateComplex6[1];

  if (_command === 'add') {
    var _z = ComplexNumber.add(new ComplexNumber(real1, imag1), new ComplexNumber(real2, imag2));

    console.log(_z.toString());
  } else if (_command === 'subtract') {
    var _z2 = ComplexNumber.subtract(new ComplexNumber(real1, imag1), new ComplexNumber(real2, imag2));

    console.log(_z2.toString());
  } else if (_command === 'mul') {
    var _z3 = ComplexNumber.multiply(new ComplexNumber(real1, imag1), new ComplexNumber(real2, imag2));

    console.log(_z3.toString());
  } else if (_command === 'div') {
    var _z4 = ComplexNumber.divide(new ComplexNumber(real1, imag1), new ComplexNumber(real2, imag2));

    console.log(_z4.toString());
  }
} else {
  console.log('bad arguments');
}